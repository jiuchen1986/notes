= Prerequisites =

Recording prerequisites to setup DPDK on a linux host, including supporting for the VM and the container scenarios.

== DPDK Introductions ==

Details of DPDK can be referred at http://www.dpdk.org/. ### What it is DPDK is a set of libraries and drivers for fast packet processing.

It is designed to run on any processors. The first supported CPU was Intel x86 and it is now extended to IBM POWER and ARM.

It runs mostly in Linux userland. A FreeBSD port is available for a subset of DPDK features.

DPDK is an Open Source BSD licensed project. The most recent patches and enhancements, provided by the community, are available in master branch.

=== Main Libraries ===

* multicore framework
* huge page memory
* ring buffers
* poll-mode drivers for networking , crypto and eventdev

=== Usage ===

These libraries can be used to:

* receive and send packets within the minimum number of CPU cycles (usually less than 80 cycles)
* develop fast packet capture algorithms (tcpdump-like)
* run third-party fast path stacks

Some packet processing functions have been benchmarked up to hundreds million frames per second, using 64-byte packets with a PCIe NIC.

=== What it is not ===

DPDK is not a networking stack and does not provide functions such as Layer-3 forwarding, IPsec, firewalling, etc. Within the tree, however, various application examples are included to help developing such features.

Some support and services are provided by several companies.

== Parts of Supported NICs ==

Complete information about NICs supporting DPDK could be found at http://www.dpdk.org/doc/nics. Features supported by the drivers can be checked at http://www.dpdk.org/doc/guides/nics/overview.html#id1.

=== Amazon ===

* ena (Elastic Network Adapter)

=== Intel ===

* e1000 (82540, 82545, 82546)
* e1000e (82571, 82572, 82573, 82574, 82583, ICH8, ICH9, ICH10, PCH, PCH2, I217, I218, I219)
* igb (82575, 82576, 82580, I210, I211, I350, I354, DH89xx)
* ixgbe (82598, 82599, X520, X540, X550)
* i40e (X710, XL710, X722)
* fm10k (FM10420)

'''Note''': The drivers e1000 and e1000e are also called em. The drivers em and igb are sometimes grouped in e1000 family.

== System Requirements ==

This section describes the packages required to compile the DPDK.

=== BIOS Setting Prerequisite on x86 ===

For the majority of platforms, no special BIOS settings are needed to use basic DPDK functionality. However, for additional HPET timer and power management functionality, and high performance of small packets, BIOS setting changes may be needed.

Consult the section on Enabling Additional Functionality (http://www.dpdk.org/doc/guides/linux_gsg/enable_func.html#enabling-additional-functionality) for more information on the required changes. The additional functionality includes:

* High Precision Event Timer (HPET) Functionality (https://en.wikipedia.org/wiki/High_Precision_Event_Timer)
* Running DPDK Applications Without Root Privileges (available for only some older linux kernel versions (&lt;4.0))
* Power Management and Power Saving Functionality
* Using Linux Core Isolation to Reduce Context Switches (https://www.linuxtopia.org/online_books/linux_kernel/kernel_configuration/re46.html)
* Loading the DPDK KNI Kernel Module (http://dpdk.org/doc/guides/prog_guide/kernel_nic_interface.html)
* Using Linux IOMMU Pass-Through to Run DPDK with Intel® VT-d (https://www.ibm.com/developerworks/library/l-pci-passthrough/index.html)

'''Note''': If UEFI secure boot (https://www.linuxjournal.com/content/take-control-your-pc-uefi-secure-boot) is enabled, the Linux kernel may disallow the use of UIO (https://www.networkworld.com/article/2299025/software/kernel-space--the-uio-interface-for-device-drivers.html) on the system. Therefore, devices for use by DPDK should be bound to the <code>vfio-pci</code> kernel module rather than <code>igb_uio</code> or <code>uio_pci_generic</code>. For more details see Binding and Unbinding Network Ports to/from the Kernel Modules (http://www.dpdk.org/doc/guides/linux_gsg/linux_drivers.html#linux-gsg-binding-kernel).

=== Compilation of the DPDK ===

==== Required Tools and Libraries ====

'''Note''': The setup commands and installed packages needed on various systems may be different. For details on Linux distributions and the versions tested, please consult the DPDK Release Notes.

* GNU <code>make</code>.
* coreutils: <code>cmp</code>, <code>sed</code>, <code>grep</code>, <code>arch</code>, etc.
* gcc: versions 4.9 or later is recommended for all platforms. On some distributions, some specific compiler flags and linker flags are enabled by default and affect performance (<code>-fstack-protector</code>, for example). Please refer to the documentation of your distribution and to <code>gcc -dumpspecs</code>.
* libc headers, often packaged as <code>gcc-multilib</code> (<code>glibc-devel.i686</code> / <code>libc6-dev-i386</code>; <code>glibc-devel.x86_64</code> / <code>libc6-dev</code> for 64-bit compilation on Intel architecture;<code>glibc-devel.ppc64</code> for 64 bit IBM Power architecture;)
* Linux kernel headers or sources required to build kernel modules. (kernel devel.x86_64; kernel devel.ppc64)
* Additional packages required for 32-bit compilation on 64-bit systems are:
* glibc.i686, libgcc.i686, libstdc++.i686 and glibc-devel.i686 for Intel i686/x86_64;
* glibc.ppc64, libgcc.ppc64, libstdc++.ppc64 and glibc-devel.ppc64 for IBM ppc_64;
* libnuma-devel library for handling NUMA (Non Uniform Memory Access).
* Python, version 2.7+ or 3.2+, to use various helper scripts included in the DPDK package.

'''Note''': x86_x32 ABI is currently supported with distribution packages only on Ubuntu higher than 13.10 or recent Debian distribution. The only supported compiler is gcc 4.9+.

==== Optional Tools: ====

* Intel® C++ Compiler (icc). For installation, additional libraries may be required. See the icc Installation Guide found in the Documentation directory under the compiler installation.
* IBM® Advance ToolChain for Powerlinux. This is a set of open source development tools and runtime libraries which allows users to take leading edge advantage of IBM’s latest POWER hardware features on Linux. To install it, see the IBM official installation document.
* libpcap headers and libraries (libpcap-devel) to compile and use the libpcap-based poll-mode driver. This driver is disabled by default and can be enabled by setting <code>CONFIG_RTE_LIBRTE_PMD_PCAP=y</code> in the build time config file.
* libarchive headers and library are needed for some unit tests using tar to get their resources.

=== Running DPDK Applications ===

To run an DPDK application, some customization may be required on the target machine.

==== System Software ====

* Kernel version &gt;= 3.2

The kernel version in use can be checked using the command: <code>uname -r</code>

* glibc &gt;= 2.7 (for features related to cpuset)

The version can be checked using the <code>ldd --version</code> command.

* Kernel configuration

In the Fedora OS and other common distributions, such as Ubuntu, or Red Hat Enterprise Linux, the vendor supplied kernel configurations can be used to run most DPDK applications.

For other kernel builds, options which should be enabled for DPDK include:

# HUGETLBFS
# PROC_PAGE_MONITOR support
# HPET and HPET_MMAP configuration options should also be enabled if HPET support is required. See the section on High Precision Event Timer (HPET) Functionality (http://www.dpdk.org/doc/guides/linux_gsg/enable_func.html#high-precision-event-timer) for more details.

==== Use of Hugepages in the Linux Environment ====

===== Reserving Hugepages for DPDK Use =====

The allocation of hugepages should be done at boot time or as soon as possible after system boot to prevent memory from being fragmented in physical memory. To reserve hugepages at boot time, a parameter is passed to the Linux kernel on the kernel command line.

For 2 MB pages, just pass the hugepages option to the kernel. For example, to reserve 1024 pages of 2 MB, use: <code>hugepages=1024</code>

For other hugepage sizes, for example 1G pages, the size must be specified explicitly and can also be optionally set as the default hugepage size for the system. For example, to reserve 4G of hugepage memory in the form of four 1G pages, the following options should be passed to the kernel: <code>default_hugepagesz=1G hugepagesz=1G hugepages=4</code>

For 64-bit applications, it is recommended to use 1 GB hugepages if the platform supports them.

'''Note''': The hugepage sizes that a CPU supports can be determined from the CPU flags on Intel architecture. If pse exists, 2M hugepages are supported; if pdpe1gb exists, 1G hugepages are supported. On IBM Power architecture, the supported hugepage sizes are 16MB and 16GB.

===== Using Hugepages with the DPDK =====

Once the hugepage memory is reserved, to make the memory available for DPDK use, perform the following steps:

<pre>mkdir /mnt/huge
mount -t hugetlbfs nodev /mnt/huge</pre>
The mount point can be made permanent across reboots, by adding the following line to the /etc/fstab file:

<pre>nodev /mnt/huge hugetlbfs defaults 0 0</pre>
For 1GB pages, the page size must be specified as a mount option:

<pre>nodev /mnt/huge_1GB hugetlbfs pagesize=1GB 0 0</pre>
